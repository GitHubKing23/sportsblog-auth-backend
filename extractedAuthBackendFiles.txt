=== FILE: C:\Users\User\auth-backend\middleware\auth.js ===



=== FILE: C:\Users\User\auth-backend\models\User.js ===

// C:\Users\User\auth-backend\src\models\User.js
import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema({
  ethereumAddress: {
    type: String,
    required: [true, 'Ethereum address is required'],
    unique: true,
    lowercase: true,
    trim: true,
  },
  nonce: {
    type: String,
    required: true,
    default: () => Math.random().toString(36).substring(2, 15),
  },
  authMethods: {
    type: [String],
    default: ['ethereum'],
  },
  roles: {
    type: [String],
    default: ['Commenter'],
  },
});

const User = mongoose.model('User', UserSchema);
export default User;

=== FILE: C:\Users\User\auth-backend\routes\auth.js ===

import express from 'express';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import { ethers } from 'ethers';
import User from '../models/User.js';

dotenv.config();
const router = express.Router();

// ‚úÖ Generate Nonce for Signing
router.post('/get-nonce', async (req, res) => {
  try {
    const { address } = req.body;

    if (!address || typeof address !== 'string') {
      return res.status(400).json({ message: "‚ö†Ô∏è Wallet address is required and must be a string." });
    }

    let user = await User.findOne({ walletAddress: address });

    if (!user) {
      user = new User({
        walletAddress: address,
        nonce: Math.floor(Math.random() * 1000000),
      });
      await user.save();
    } else {
      user.nonce = Math.floor(Math.random() * 1000000);
      await user.save();
    }

    res.json({ nonce: user.nonce });
  } catch (error) {
    console.error("‚ùå Nonce Generation Error:", error);
    res.status(500).json({ message: "Server error", error: error.message || error });
  }
});

// ‚úÖ Authenticate User via Signature Verification
router.post('/web3-login', async (req, res) => {
  try {
    const { address, signature } = req.body;

    if (!address || !signature) {
      return res.status(400).json({ message: "‚ö†Ô∏è Missing wallet address or signature." });
    }

    const user = await User.findOne({ walletAddress: address });

    if (!user) {
      return res.status(404).json({ message: "User not found." });
    }

    const message = `Sign this message to authenticate. Nonce: ${user.nonce}`;
    const recoveredAddress = ethers.verifyMessage(message, signature);

    if (recoveredAddress.toLowerCase() !== address.toLowerCase()) {
      return res.status(401).json({ message: "Signature verification failed." });
    }

    // ‚úÖ Generate JWT
    const token = jwt.sign(
      { id: user._id, walletAddress: user.walletAddress },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    // üõ°Ô∏è Reset nonce after login
    user.nonce = Math.floor(Math.random() * 1000000);
    await user.save();

    res.json({
      token,
      user: {
        id: user._id,
        walletAddress: user.walletAddress,
      },
    });
  } catch (error) {
    console.error("‚ùå Web3 Login Error:", error);
    res.status(500).json({ message: "Server error", error: error.message || error });
  }
});

export default router;


=== FILE: C:\Users\User\auth-backend\src\controllers\auth\ethereumAuthController.js ===

const User = require('../../models/User');
const jwt = require('jsonwebtoken');
const { ethers } = require('ethers');
const crypto = require('crypto');

// ‚úÖ GET NONCE
const getNonce = async (req, res) => {
  try {
    let { ethereumAddress } = req.body;

    if (!ethereumAddress || typeof ethereumAddress !== 'string' || ethereumAddress.trim() === '') {
      console.warn('‚ö†Ô∏è Missing or invalid Ethereum address');
      return res.status(400).json({ error: 'Valid Ethereum address is required' });
    }

    ethereumAddress = ethereumAddress.trim().toLowerCase();

    const nonce = crypto.randomBytes(16).toString('hex');

    let user = await User.findOne({ walletAddress: ethereumAddress });

    if (!user) {
      user = new User({
        walletAddress: ethereumAddress,
        nonce,
        authMethods: ['ethereum'],
        roles: ['Commenter']
      });
    } else {
      user.nonce = nonce;
    }

    await user.save();
    console.log(`‚úÖ Nonce generated for: ${ethereumAddress}`);
    return res.status(200).json({ nonce });
  } catch (error) {
    console.error('‚ùå Error generating nonce:', error);
    return res.status(500).json({ error: 'Internal server error while generating nonce' });
  }
};

// ‚úÖ VERIFY SIGNATURE
const verifySignature = async (req, res) => {
  try {
    let { ethereumAddress, signature } = req.body;

    if (!ethereumAddress || !signature) {
      return res.status(400).json({ error: 'Ethereum address and signature are required' });
    }

    ethereumAddress = ethereumAddress.trim().toLowerCase();

    const user = await User.findOne({ walletAddress: ethereumAddress });

    if (!user || !user.nonce) {
      return res.status(400).json({ error: 'Invalid or expired Ethereum login attempt' });
    }

    const message = `Sign this message to log in: ${user.nonce}`;
    const recoveredAddress = ethers.verifyMessage(message, signature);

    if (recoveredAddress.toLowerCase() !== ethereumAddress) {
      return res.status(401).json({ error: 'Invalid signature - verification failed' });
    }

    // Invalidate nonce to prevent replay
    user.nonce = null;
    await user.save();

    const token = jwt.sign(
      {
        userId: user._id,
        walletAddress: user.walletAddress,
        roles: user.roles,
      },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    console.log(`‚úÖ Signature verified for: ${ethereumAddress}`);
    return res.status(200).json({ token });
  } catch (error) {
    console.error('‚ùå Signature verification failed:', error);
    return res.status(500).json({ error: 'Internal server error during signature verification' });
  }
};

module.exports = {
  getNonce,
  verifySignature
};


=== FILE: C:\Users\User\auth-backend\src\models\User.js ===

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  email: {
    type: String,
    unique: true,
    sparse: true,
    lowercase: true,
    trim: true
  },
  passwordHash: {
    type: String
  },
  ethereumAddress: {
    type: String,
    unique: true,
    sparse: true,
    lowercase: true,
    trim: true
  },
  nonce: {
    type: String,
    default: null
  },
  roles: {
    type: [String],
    default: ['Commenter']
  },
  authMethods: {
    type: [String],
    enum: ['email', 'ethereum'],
    default: []
  },
  isEmailVerified: {
    type: Boolean,
    default: false
  }
}, { timestamps: true });

module.exports = mongoose.model('User', userSchema);


=== FILE: C:\Users\User\auth-backend\src\routes\ethereumAuthRoutes.js ===

import express from 'express';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import { ethers } from 'ethers';
import User from '../models/User.js';

dotenv.config();
const router = express.Router();

// Generate Nonce for Signing
router.post('/get-nonce', async (req, res) => {
  try {
    const { address } = req.body;

    if (!address || typeof address !== 'string') {
      return res.status(400).json({ message: "‚ö†Ô∏è Wallet address is required and must be a string." });
    }

    let user = await User.findOne({ walletAddress: address });

    if (!user) {
      user = new User({
        walletAddress: address,
        nonce: Math.floor(Math.random() * 1000000),
      });
      await user.save();
    } else {
      user.nonce = Math.floor(Math.random() * 1000000);
      await user.save();
    }

    res.json({ nonce: user.nonce });
  } catch (error) {
    console.error("‚ùå Nonce Generation Error:", error);
    res.status(500).json({ message: "Server error", error: error.message || error });
  }
});

// Authenticate User via Signature Verification
router.post('/web3-login', async (req, res) => {
  try {
    const { address, signature } = req.body;

    if (!address || !signature) {
      return res.status(400).json({ message: "‚ö†Ô∏è Missing wallet address or signature." });
    }

    const user = await User.findOne({ walletAddress: address });

    if (!user) {
      return res.status(404).json({ message: "User not found." });
    }

    const message = `Sign this message to authenticate. Nonce: ${user.nonce}`;
    const recoveredAddress = ethers.verifyMessage(message, signature);

    if (recoveredAddress.toLowerCase() !== address.toLowerCase()) {
      return res.status(401).json({ message: "Signature verification failed." });
    }

    // Generate JWT
    const token = jwt.sign(
      { id: user._id, walletAddress: user.walletAddress },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    // Reset nonce after login
    user.nonce = Math.floor(Math.random() * 1000000);
    await user.save();

    res.json({
      token,
      user: {
        id: user._id,
        walletAddress: user.walletAddress,
      },
    });
  } catch (error) {
    console.error("‚ùå Web3 Login Error:", error);
    res.status(500).json({ message: "Server error", error: error.message || error });
  }
});

// **Default export of the router**
export default router;


=== FILE: C:\Users\User\auth-backend\src\server.js ===

import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cors from 'cors';
import authRoutes from './routes/ethereumAuthRoutes.js';
import path from 'path';
import { fileURLToPath } from 'url';
import { createServer } from 'http'; // Required for Socket.IO
import { Server } from 'socket.io';   // Import Socket.IO

// Convert URL to file path for __dirname in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables from .env file located one directory up
dotenv.config({ path: path.resolve(__dirname, '../.env') });

console.log("üîß Loaded ENV variables:");
console.log("- PORT:", process.env.PORT);
console.log("- FRONTEND_URL:", process.env.FRONTEND_URL);
console.log("- MONGO_URI:", process.env.MONGO_URI ? "‚úÖ Exists" : "‚ùå Missing");
console.log("- JWT_SECRET:", process.env.JWT_SECRET ? "‚úÖ Exists" : "‚ùå Missing");

const app = express();
const server = createServer(app); // Create HTTP server to support Socket.IO

// Initialize Socket.IO with CORS settings
const io = new Server(server, {
  cors: {
    origin: ['http://localhost:3000', 'https://sportifyinsider.com'],
    credentials: true,
  },
});

const allowedOrigins = [
  'http://localhost:3000',
  'https://sportifyinsider.com',
];

// Setup CORS middleware using a dynamic origin function
app.use(cors({
  origin: (origin, callback) => {
    // Allow requests with no origin (like mobile apps, curl, Postman)
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.warn(`‚ùå Blocked by CORS: ${origin}`);
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
}));

// Parse JSON payloads
app.use(express.json());

// Log each incoming request for debugging
app.use((req, res, next) => {
  console.log(`üì• Incoming request: ${req.method} ${req.url}`);
  next();
});

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("‚úÖ MongoDB Connected"))
  .catch(err => {
    console.error("‚ùå MongoDB connection failed:");
    console.error(err);
    process.exit(1);
  });

// Routes ‚Äì mount the auth-related routes
app.use('/auth', authRoutes);

// Basic health-check endpoint
app.get('/', (req, res) => {
  res.send('‚úÖ Ethereum Auth API is running...');
});

// Socket.IO setup
io.on('connection', (socket) => {
  console.log('‚úÖ A user connected:', socket.id);

  socket.on('disconnect', () => {
    console.log('‚ùå User disconnected:', socket.id);
  });
});

// Use the PORT from environment variables or default to 5003
const PORT = process.env.PORT || 5003;
console.log("üöÄ Starting Ethereum Auth Server on port:", PORT);

// Start the server and listen on all network interfaces
server.listen(PORT, '0.0.0.0', () =>
  console.log(`üöÄ Ethereum Auth Server running on http://0.0.0.0:${PORT}`)
);


=== FILE: C:\Users\User\auth-backend\.env ===

PORT=5003
MONGO_URI=***REDACTED***
JWT_SECRET=yourSuperSecretKey
FRONTEND_URL=https://sportifyinsider.com


=== FILE: C:\Users\User\auth-backend\package.json ===

{
  "name": "sportsblog-auth-backend",
  "version": "1.0.0",
  "type": "module",
  "main": "src/server.js",
  "scripts": {
    "start": "node src/server.js",
    "dev": "nodemon src/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "Advanced user authentication backend for Sports Blog supporting Ethereum and Email login.",
  "dependencies": {
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "ethers": "^6.13.5",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.12.2",
    "socket.io": "^4.8.1"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}


